<?php

/**
 * CrutTrait
 *
 * @version 0.3 [add] crud_has_input_type() method
 * @version 0.4 [add] crud_has_input_type() method
 * @version 0.5 [add] _onefile_s3_signed_url() method
 * @version 0.6 [fix] moved to Models
 *
 */


namespace App\Models;

trait CrudTrait
{
    private $crud_config;

    /**
     * load crud json
     * @return
     */
    public function crud_set_json( $format='json', $class_name = '' )
    {
        if (! $class_name ){
            $ar = explode('\\', get_called_class());
            $class_name = end($ar);
        }

        if (strcmp($format, 'json') == 0 ){
            $url = __DIR__ . '/' . $class_name . '.json';
            $input_src = file_get_contents($url);
            $this->crud_config = json_decode($input_src);
        }
        elseif (strcmp($format, 'yaml') == 0 ){
            $url = __DIR__ . '/' . $class_name . '.yml';
            $input_src = file_get_contents($url);
            $this->crud_config = \Symfony\Component\Yaml\Yaml::parse($input_src);
            // 配列をObjectに変換
            $this->crud_config = json_decode(json_encode($this->crud_config));
        }
    }


    /**
     * CRUD情報の中に component を含むかどうかを判別して返す。
     * @param   string      input type name (e.g. component_summernote )
     * @return  boolean     true: 指定したコンポーネントが存在する  false:指定したコンポーネントが存在しない
     *
     */
    public function crud_has_input_type( $input_type_name )
    {
        $crud_config = $this->get_crud_config();
        foreach ($crud_config->table_desc as $k => $v) {
            if ( @$v->input_type === $input_type_name ){
                return true;
            }
        }
        return false;
    }


    /**
     * CRUD情報のgetter
     *
     * @return
     *
     */
    public function get_crud_config()
    {
        return $this->crud_config;
    }


    /**
     * 独自メソッド : ->_file_download('item_files_name',0); で　DBカラム「item_files_name」の 0 番目のファイルをダウンロードさせる
     *
     * @param   string      $column_name
     * @param   int         $no
     *
     */
    public function _file_download( $column_name, $no ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                if ( is_null($this->attributes[$k]) ){ return null; }

                $json_array = json_decode( $this->attributes[$k], true );

                if ( is_null($json_array) ){ return null; }
                if ( ! isset($json_array[$no]) ){ return null; }

                $json = $json_array[$no];
                $disk = \Storage::disk($json['disk']);
                return $disk->download("{$json['dir']}/{$json['file_name']}");
            }
        }
        return null;
    }



    /**
     * 独自メソッド : ->_file_dir_and_filename('item_files_name',0); で　DBカラム「item_files_name」の 0 番目の画像のディレクトリとファイル名を返す（ public ディスク ）
     *
     * @param   string      $column_name
     * @param   int         $no
     *
     */
    public function _file_dir_and_filename( $column_name, $no ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                if ( is_null($this->attributes[$k]) ){ return null; }
                $json_array = json_decode( $this->attributes[$k], true );

                if ( is_null($json_array) ){ return null; }
                if ( ! isset($json_array[$no]) ){ return null; }

                $json = $json_array[$no];
                $disk = \Storage::disk($json['disk']);
                return "{$json['dir']}/{$json['file_name']}";
            }
        }
        return null;
    }



    /**
     * 独自メソッド : ->_file_path('item_files_name',0); で　DBカラム「item_files_name」の 0 番目の画像のurlを返す（ public ディスク ）
     *
     * @param   string      $column_name
     * @param   int         $no
     *
     */
    public function _file_path( $column_name, $no ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                if ( is_null($this->attributes[$k]) ){ return null; }
                $json_array = json_decode( $this->attributes[$k], true );

                if ( is_null($json_array) ){ return null; }
                if ( ! isset($json_array[$no]) ){ return null; }

                // dd( $json_array[$no] );
                $json = $json_array[$no];
                // dd( $json );
                $disk = \Storage::disk($json['disk']);
                return $disk->path("{$json['dir']}/{$json['file_name']}");
            }
        }
        return null;
    }



    /**
     * 独自メソッド : ->_file_url('item_files_name',0); で　DBカラム「item_files_name」の 0 番目の画像のurlを返す（ public ディスク ）
     *
     * @param   string      $column_name
     * @param   int         $no
     *
     */
    public function _file_url( $column_name, $no ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                if ( is_null($this->attributes[$k]) ){ return null; }
                $json_array = json_decode( $this->attributes[$k], true );

                if ( is_null($json_array) ){ return null; }
                if ( ! isset($json_array[$no]) ){ return null; }

                $json = $json_array[$no];
                $disk = \Storage::disk($json['disk']);
                return $disk->url("{$json['dir']}/{$json['file_name']}");
            }
        }
        return null;
    }


    /**
     * 独自メソッド : ->_file_count('item_files_name'); で　DBカラム「item_files_name」の画像数を返す
     *
     *
     */
    public function _file_count( string $column_name ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                $json_array = json_decode( $this->attributes[$k], true );
                if (is_null($json_array)){ return 0; }
                return count($json_array);
            }
        }
        return null;
    }


    /**
     * 独自メソッド : ->_file_width_height('item_files_name',0); で　DBカラム「item_files_name」の 0番目の画像のwidth,heightを返す
     *
     * @param   string      $column_name
     * @param   int         $no
     *
     */
    public function _file_width_height( $column_name, $no ){
        $file_path = $this->_file_path($column_name, $no);
        // dd( $file_path );
        if ( is_file($file_path) ){
            $i = getimagesize($file_path);
            return [ $i[0], $i[1]];
        }
    }


    /**
     * 独自メソッド : ->_onefile_url('item_files_name'); で　DBカラム「item_files_name」の 画像のurlを返す（ public ディスク ）
     *
     * @param   string      $column_name
     *
     */
    public function _onefile_url( $column_name ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                if ( is_null($this->attributes[$k]) ){ return null; }
                $json_array = json_decode( $this->attributes[$k], true );

                if ( is_null($json_array) ){ return null; }

                $json = $json_array;
                $disk = \Storage::disk($json['disk']);
                return $disk->url("{$json['dir']}/{$json['file_name']}");
            }
        }
        return null;
    }


    /**
     * 独自メソッド : ->_onefile_s3_signed_url('item_files_name'); で　DBカラム「item_files_name」の 画像のS3 pre signed urlを返す（ s3 ディスクのみ ）
     *
     * @param   string      $column_name
     *
     */
    public function _onefile_s3_signed_url( $column_name, string $expiry = "+10 minutes" ){
        foreach ($this->attributes as $k => $v) {
            if ( strcmp($column_name, $k) == 0 ){
                if ( is_null($this->attributes[$k]) ){ return null; }
                $json_array = json_decode( $this->attributes[$k], true );

                if ( is_null($json_array) ){ return null; }

                $json = $json_array;
                if ( $json['disk'] !== "s3" ){ return null; }
                else {
                    $s3 = \Storage::disk('s3');
                    $client = $s3->getDriver()->getAdapter()->getClient();
                    // $expiry = "+10 minutes";

                    $command = $client->getCommand('GetObject', [
                        'Bucket' => env('AWS_BUCKET') ,
                        'Key'    => "{$json['dir']}/{$json['file_name']}"
                    ]);

                    $request = $client->createPresignedRequest($command, $expiry);
                    $signed_url = (string) $request->getUri();
                    return $signed_url;
                }

            }
        }
        return null;
    }


    public static function get_model_classname()
    {
        static::who(); // これで、遅延静的束縛が行われます
    }


}
