<?php namespace App\Http\Controllers;

use App\Http\Requests;
use App\Http\Controllers\Controller;

use {{model_path}};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;
use DB;

class {{class}} extends Controller {


	protected $search_columns;

	{{validation_text}}


	function __construct(){
		$this->setSearchColumnsAuto();
	}


	/**
	 * 検索に使用するカラムを明示的に設定する（適宜書き換えること。また __construct() の $this->setSearchColumnsAuto(); を $this->setSearchColumns(); に変更すること。）
	 * @return void
	 */
	private function setSearchColumns(){
		$this->search_columns = [
			"id"                  => "id",
			"sample__category_id" => "例__カテゴリ名",
			"sample__title"       => "例__タイトル",
			"sample__content"     => "例__内容",
		];
	}


	/**
	 * 検索に使用するカラムを自動的に設定する
	 * @return void
	 */
	private function setSearchColumnsAuto(){
		$columns = Schema::getColumnListing('{{model_name_var}}');
		$columns_loop = $columns;
		for ($i=count($columns_loop)-1; $i >=0; $i--) {
			if ( preg_match("/(created_at|updated_at)/",$columns_loop[$i] ) ){
				array_pop( $columns_loop );
			}
		}
		foreach ($columns_loop as $v) {
			$this->search_columns[$v] = $v;
		}
	}


	/**
	 * Display a listing of the resource.
	 * @return Response
	 */
	// public function index( Request $request )
	// {
	// 	$limit = 10;
	// 	$search_columns_loop = $this->search_columns;
	// 	${{model_name_var}} = {{model_name_class}}::orderBy('id', 'desc')->paginate( $limit );
	// 	$q = null;
	// 	$pagination_params = null;

	//  	${{model_name_var_sgl}} = new {{model_name_class}}();
	// 	${{model_name_var_sgl}}->crud_set_json();
	// 	$crud_config = ${{model_name_var_sgl}}->get_crud_config();

	// 	// normal view
	// 	return view('{{model_name_var}}.index', compact('{{model_name_var}}','search_columns_loop','q','pagination_params', 'crud_config'));

	// 	// Vue.js Datatable view
	// 	// return view('{{model_name_var}}.index_ajax', compact('{{model_name_var}}','search_columns_loop','q','pagination_params', 'crud_config'));
	// }


	/**
	 * for Vue.js
	 * @return array
	 */
	public function index_ajax( Request $request )
	{
		${{model_name_var}} = {{model_name_class}}::orderBy('id', 'desc')->get();
		return ${{model_name_var}}->toArray();
	}


	/**
	 * search resource.
	 * @return Response
	 */
	public function index( Request $request )
	{
		$q = $request->all();

		$limit = 10;
		if ( @$q['limit'] ){
			$limit = $q['limit'];
		}
		if ( $limit > 100 ){
			$limit = 100;
		}

		$search_columns_loop = $this->search_columns;

		$model = {{model_name_class}}::query();

		// 検索
		if ( @$q['q'] ){
			$q['q'] = mb_convert_kana($q['q'], "s", "UTF-8");
			$q['q'] = preg_replace("/\s+/"," ",$q['q']);
			$q['q'] = trim( $q['q'] );
			$q_array = preg_split("/\s/",$q['q']);
			if ( @$q['search_column']){
				// 特定のカラム（$q['search_column']）を検索
				if ( count($q_array) == 1 ){	// 1.（特定のカラム）検索テキストが1つの時
					$model->where($q['search_column'], 'LIKE', "%{$q['q']}%");
				} else {						// 2.（特定のカラム）検索テキストがスペース区切りの複数の時
					$model->where( function($model) use($q_array,$q){
						foreach ($q_array as $tk => $tv) {
							$model->whereRaw("`{$q['search_column']}` LIKE ?", "%{$tv}%");
						}
					});
				}
			}
			// すべてのカラムを検索
			else {
				if ( count($q_array) == 1 ){	// 3.（すべてのカラム）検索テキストが1つの時
					foreach ($search_columns_loop as $k => $v) {
						$model->orWhere($k, 'LIKE', "%{$q['q']}%");
						// $model->orwhereRaw('`title` LIKE ? and `title` LIKE ?', array("%タイトル%", "%よ%"));
					}
				}
				else{							// 4.（すべてのカラム）検索テキストがスペース区切りの複数の時
					foreach ($search_columns_loop as $k => $v) {
						$search_column = $k;
						$model->orWhere( function($model) use($q_array,$q,$search_column){
							foreach ($q_array as $tk => $tv) {
								$model->whereRaw("`{$search_column}` LIKE ?", "%{$tv}%");
							}
						});
					}
				}
			}
		}

		// pagination用パラメーター
		$pagination_params = $q;

		// // DB検索の実行
		// ${{model_name_var}} = $model->orderBy('id', 'desc')->paginate( $limit );

		// sort default
		$column    = 'id';
		$direction = 'desc';

		// （ソートが指定されている時。 column=tanto_name&direction=DESC ）
		if (isset($q['column'])){ $column = $q['column']; }
		if (isset($q['direction'])){ $direction = $q['direction']; }

		// DB検索の実行
		${{model_name_var}} = $model->orderBy($column, $direction)->paginate( $limit );


	 	${{model_name_var_sgl}} = new {{model_name_class}}();
		${{model_name_var_sgl}}->crud_set_json();
		$crud_config = ${{model_name_var_sgl}}->get_crud_config();

		// normal view
		return view('{{model_name_var}}.index', compact('{{model_name_var}}','search_columns_loop','q','pagination_params', 'crud_config'));
	}


	/**
	 * Show the form for creating a new resource.
	 * @return Response
	 */
	// OLD public function create()
	// OLD {
	// OLD 	${{model_name_var_sgl}} = new {{model_name_class}}();
	// OLD 	return view('{{model_name_var}}.edit', compact('{{model_name_var_sgl}}'));
	// OLD }
	public function create(Request $request)
	{
	 	${{model_name_var_sgl}} = new {{model_name_class}}();
		${{model_name_var_sgl}}->crud_set_json();
		$crud_config = ${{model_name_var_sgl}}->get_crud_config();
		$_back_uri = $request->input('_back_uri');
		return view('{{model_name_var}}.edit', compact('{{model_name_var_sgl}}', '_back_uri', 'crud_config'));
	}


	/**
	 * Store a newly created resource in storage.
	 *
	 * @param Request $request
	 * @return Response
	 */
	public function store(Request $request)
	{
		$this->validate($request, $this->validation_column);

		${{model_name_var_sgl}} = new {{model_name_class}}();
		${{model_name_var_sgl}}->fill( $request->all() );
		${{model_name_var_sgl}}->save();

		$_back_uri = $request->input('_back_uri');
		if ( $_back_uri ){
			return redirect($_back_uri);
		}
		else {
			return redirect()->route('{{prefix}}{{model_name_var}}.index')->with('message', 'Item created successfully.');
		}
	}


	/**
	 * Display the specified resource.
	 * @param  int  $id
	 * @return Response
	 */
	public function show(Request $request, $id)
	{
		${{model_name_var_sgl}} = {{model_name_class}}::findOrFail($id);
		$_back_uri = $request->input('_back_uri');
		${{model_name_var_sgl}}->crud_set_json();
		$crud_config = ${{model_name_var_sgl}}->get_crud_config();
		return view('{{model_name_var}}.show', compact('{{model_name_var_sgl}}', '_back_uri', 'crud_config'));
	}


	/**
	 * Show the form for editing the specified resource.
	 * @param  int  $id
	 * @return Response
	 */
	//OLD public function edit($id)
	//OLD {
	//OLD 	${{model_name_var_sgl}} = {{model_name_class}}::findOrFail($id);
	//OLD 	return view('{{model_name_var}}.edit', compact('{{model_name_var_sgl}}'));
	//OLD }
	public function edit(Request $request, $id)
	{
	 	${{model_name_var_sgl}} = {{model_name_class}}::findOrFail($id);
		$_back_uri = $request->input('_back_uri');
		${{model_name_var_sgl}}->crud_set_json();
		$crud_config = ${{model_name_var_sgl}}->get_crud_config();
	 	return view('{{model_name_var}}.edit', compact('{{model_name_var_sgl}}', '_back_uri', 'crud_config'));
	}


	/**
	 * Update the specified resource in storage.
	 * @param  int  $id
	 * @param Request $request
	 * @return Response
	 */
	public function update(Request $request, $id)
	{
		$this->validate($request, $this->validation_column);

		${{model_name_var_sgl}} = {{model_name_class}}::findOrFail($id);
		${{model_name_var_sgl}}->fill( $request->all() );
		${{model_name_var_sgl}}->save();

		$_back_uri = $request->input('_back_uri');
		if ( $_back_uri ){
			return redirect($_back_uri);
		}
		else {
			return redirect()->route('{{prefix}}{{model_name_var}}.index')->with('message', 'Item updated successfully.');
		}

	}


	/**
	 * Remove the specified resource from storage.
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy(Request $request, $id)
	{
		${{model_name_var_sgl}} = {{model_name_class}}::findOrFail($id);
		${{model_name_var_sgl}}->delete();

		$_back_uri = $request->input('_back_uri');
		if ( $_back_uri ){
			return redirect($_back_uri);
		}
		else {
			return redirect()->route('{{prefix}}{{model_name_var}}.index')->with('message', 'Item deleted successfully.');
		}
	}


	/**
	 * Remove the specified resource from storage.
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy_ajax(Request $request, $id)
	{
		${{model_name_var_sgl}} = {{model_name_class}}::findOrFail($id);
		${{model_name_var_sgl}}->delete();
		return [
			'result_code' => $result ,
			'id'          => $id ,
		];
	}



}

